{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding Stuff\\\\My_Projects\\\\CleverProgrammer_Projects\\\\amazon-clone\\\\src\\\\Payment.js\";\nimport React, { useEffect, useState } from 'react';\nimport './Payment.css';\nimport { useStateValue } from './StateProvider';\nimport { useHistory } from 'react-router-dom';\nimport CheckoutProduct from './CheckoutProduct';\nimport CurrencyFormat from 'react-currency-format';\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { getBasketTotal } from './reducer';\nimport axios from './axios';\nimport { dataBase } from './firebase';\n\nfunction Payment() {\n  const history = useHistory();\n  const [{\n    basket\n  }, dispatch] = useStateValue();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [succeded, setSucceeded] = useState(false);\n  const [processing, setProcessing] = useState(true); // ! we use \"error\" to capture the error if there is some \n\n  const [error, setError] = useState(null);\n  const [disabled, setDisabled] = useState(true); // ! this will tell stripe to give the information that client just entered (number) !\n\n  const [clientSecret, setClientSecret] = useState(true);\n  useEffect(() => {\n    // generate the special stripe secret which allows us to charge a customer\n    const getClientSecret = async () => {\n      const response = await axios({\n        method: 'post',\n        // Stripe expects the total in a currencies subunits\n        url: `/payments/create?total=${getBasketTotal(basket) * 100}`\n      });\n      setClientSecret(response.data.clientSecret);\n    };\n\n    getClientSecret();\n  }, [basket]); // ? here when the component reloads we run this function as well we run when the basket component changes\n\n  console.log('The Secret Is >>> ', clientSecret);\n\n  const handleSubmit = async event => {\n    // ? this function does all the fancy stripe stuff....\n    event.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    }).then(({\n      paymentIntent\n    }) => {\n      var _user;\n\n      // paymentIntent = payment confirmation\n      dataBase.collection('users').doc((_user = user) === null || _user === void 0 ? void 0 : _user.id).collection();\n      setSucceeded(true);\n      setError(null);\n      setProcessing(false);\n      dispatch({\n        type: 'EMPTY_BASKET'\n      });\n      history.replace('/orders');\n    });\n  };\n\n  const handleChange = event => {\n    // ? this function listens for the changes in the CardElement\n    // ? and diplay any errors as the customer types ther card detais.\n    setDisabled(false);\n    setProcessing(false);\n    setError(event.error ? event.error.message : \"success\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      cursor: 'pointer'\n    },\n    align: \"center\",\n    onClick: e => history.push('/'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, \"Checkout (\", /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'green',\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 104\n    }\n  }, basket.length), \" items)\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, \"Delivery Address\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }, \"#147 React Lane\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, \"California , \"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  }, \"USA -3290\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 25\n    }\n  }, \"Review items and delivery\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }, basket.map(item => /*#__PURE__*/React.createElement(CheckoutProduct, {\n    id: item.id,\n    title: item.title,\n    image: item === null || item === void 0 ? void 0 : item.image,\n    price: item.price,\n    ratings: item.ratings,\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 25\n    }\n  }, \"Payment Method\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__priceCantainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(CurrencyFormat, {\n    renderText: value => /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 41\n      }\n    }, \"Order Total : \", value),\n    decimalScale: 2,\n    value: getBasketTotal(basket),\n    displayType: \"text\",\n    thousandSeperator: true,\n    prefix: \"$\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: processing || disabled || succeded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 37\n    }\n  }, processing ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 57\n    }\n  }, \"Processing\") : \"buy Now\"))), error && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 39\n    }\n  }, error))))));\n}\n\nexport default Payment;","map":{"version":3,"sources":["D:/Coding Stuff/My_Projects/CleverProgrammer_Projects/amazon-clone/src/Payment.js"],"names":["React","useEffect","useState","useStateValue","useHistory","CheckoutProduct","CurrencyFormat","CardElement","useElements","useStripe","getBasketTotal","axios","dataBase","Payment","history","basket","dispatch","stripe","elements","succeded","setSucceeded","processing","setProcessing","error","setError","disabled","setDisabled","clientSecret","setClientSecret","getClientSecret","response","method","url","data","console","log","handleSubmit","event","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","then","paymentIntent","collection","doc","user","id","type","replace","handleChange","message","cursor","e","push","color","fontWeight","length","map","item","title","image","price","ratings","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Payment.css';\r\nimport { useStateValue } from './StateProvider';\r\nimport { useHistory } from 'react-router-dom';\r\nimport CheckoutProduct from './CheckoutProduct';\r\nimport CurrencyFormat from 'react-currency-format';\r\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\r\nimport { getBasketTotal } from './reducer';\r\nimport axios from './axios';\r\nimport { dataBase } from './firebase';\r\n\r\nfunction Payment() {\r\n\r\n    const history = useHistory();\r\n    const [{basket},dispatch] = useStateValue();\r\n\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n\r\n    const [succeded, setSucceeded] = useState(false);\r\n    const [processing, setProcessing] = useState(true);\r\n\r\n    // ! we use \"error\" to capture the error if there is some \r\n    const [error, setError] = useState(null);\r\n    const [disabled, setDisabled] = useState(true);\r\n\r\n    // ! this will tell stripe to give the information that client just entered (number) !\r\n    const [clientSecret , setClientSecret] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // generate the special stripe secret which allows us to charge a customer\r\n        const getClientSecret = async () => {\r\n            const response = await axios({\r\n                method: 'post',\r\n                // Stripe expects the total in a currencies subunits\r\n                url: `/payments/create?total=${getBasketTotal(basket) * 100}`\r\n            });\r\n            setClientSecret(response.data.clientSecret)\r\n        }\r\n\r\n        getClientSecret();\r\n    }, [basket])    \r\n    // ? here when the component reloads we run this function as well we run when the basket component changes\r\n\r\n    console.log('The Secret Is >>> ', clientSecret);\r\n    const handleSubmit = async (event) =>{\r\n        // ? this function does all the fancy stripe stuff....\r\n        event.preventDefault();\r\n        setProcessing(true);\r\n\r\n        const payload = await stripe.confirmCardPayment(clientSecret , {\r\n            payment_method:{\r\n                card:elements.getElement(CardElement)\r\n            }\r\n        }).then(({paymentIntent})=>{\r\n            // paymentIntent = payment confirmation\r\n\r\n            dataBase.collection('users').doc(user?.id).collection();\r\n\r\n            setSucceeded(true);\r\n            setError(null);\r\n            setProcessing(false);\r\n\r\n            dispatch({\r\n                type:'EMPTY_BASKET'\r\n            })\r\n\r\n            history.replace('/orders');\r\n        })\r\n        }\r\n\r\n    const handleChange = (event) =>{\r\n        // ? this function listens for the changes in the CardElement\r\n        // ? and diplay any errors as the customer types ther card detais.\r\n\r\n        setDisabled(false);\r\n        setProcessing(false);\r\n        setError(event.error ? event.error.message : \"success\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"payment\">\r\n                <h1 style={{cursor:'pointer'}} align=\"center\" onClick={e=>history.push('/')}>Checkout (<span style={{color:'green',fontWeight:'bold'}}>{basket.length}</span> items)</h1>\r\n            <div className=\"payment__container\">\r\n                {/* Payment Section -> Delivery Address */}\r\n                <div className=\"payment__section\">\r\n                    <div className=\"payment__title\">\r\n                    <h3>Delivery Address</h3>\r\n                    </div> \r\n                    <div className=\"payment__address\">\r\n                        <p>#147 React Lane</p>\r\n                        <p>California , </p>\r\n                        <p>USA -3290</p>\r\n                    </div>\r\n                </div>   \r\n                {/* Payment Section -> Review Items */}\r\n                <div className=\"payment__section\">\r\n                    <div className=\"payment__title\">\r\n                        <h3>Review items and delivery</h3>\r\n                    </div>\r\n\r\n                    <div className=\"payment__items\">\r\n                        {basket.map(item=>(\r\n                        <CheckoutProduct \r\n                        id={item.id}\r\n                        title={item.title}\r\n                        image={item?.image}\r\n                        price={item.price}\r\n                        ratings={item.ratings}\r\n                        key={item.id}\r\n                        /> \r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                {/* Payment Section -> Payment Method */}\r\n                <div className=\"payment__section\">\r\n                    <div className=\"payment__title\">\r\n                        <h3>Payment Method</h3>\r\n                    </div>\r\n                    <div className=\"payment__details\">\r\n                        {/* Stripe magic will go here */}\r\n\r\n                        <form onSubmit={handleSubmit}>\r\n                                <CardElement onChange={handleChange} />\r\n\r\n                            <div className=\"payment__priceCantainer\">\r\n                                <CurrencyFormat \r\n                                    renderText={(value) =>(\r\n                                        <h3>Order Total : {value}</h3>\r\n                                    )}\r\n                                    decimalScale={2}\r\n                                    value={getBasketTotal(basket)}\r\n                                    displayType={\"text\"}\r\n                                    thousandSeperator={true}\r\n                                    prefix={\"$\"}\r\n                                />\r\n                                <button disabled={processing || disabled || succeded}>\r\n                                    <span>{processing ? <p>Processing</p> : \"buy Now\"}</span>\r\n                                </button>\r\n                            </div>\r\n                            {/* Errors*/}\r\n                            {error && <div>{error}</div>}\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n    \r\nexport default Payment\r\n"]},"metadata":{},"sourceType":"module"}